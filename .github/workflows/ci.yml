name: Test Suite

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]
        exclude:
          # Skip some combinations to reduce CI load
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.11"
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Create virtual environment and install minimal dependencies
      run: |
        uv venv --python ${{ matrix.python-version }}
        uv pip install platformdirs

    - name: Fetch git tags
      run: git fetch --tags

    - name: Get cache directory path and latest tag
      id: cache-path
      run: |
        echo "üîç Getting cache directory path and latest tag..."
        uv run python -c "
        import os
        import subprocess
        from platformdirs import user_cache_dir
        from pathlib import Path

        # Get cache directory
        cache_dir = Path(user_cache_dir('bird-head-detector', 'ericphanson'))
        models_dir = cache_dir / 'models'

        # Get latest git tag
        latest_tag = 'no-tags'
        try:
            result = subprocess.run(['git', 'describe', '--tags', '--abbrev=0'],
                                  capture_output=True, text=True, check=True)
            latest_tag = result.stdout.strip()
            print(f'Found latest tag: {latest_tag}')
        except Exception as e:
            print(f'No tags found: {e}')
            # Fallback: try to get tags directly and sort
            try:
                result = subprocess.run(['git', 'tag', '--list'],
                                      capture_output=True, text=True, check=True)
                tags = [t.strip() for t in result.stdout.strip().split('\n') if t.strip()]
                if tags:
                    latest_tag = sorted(tags)[-1]
                    print(f'Found latest tag via git tag: {latest_tag}')
            except Exception as e2:
                print(f'Also failed to get tags: {e2}')

        # Output to GitHub Actions
        github_output = os.environ.get('GITHUB_OUTPUT', '')
        if github_output:
            with open(github_output, 'a') as f:
                f.write(f'cache-dir={models_dir}\n')
                f.write(f'latest-tag={latest_tag}\n')

        print(f'Cache directory: {models_dir}')
        print(f'Latest tag: {latest_tag}')
        "

    - name: Cache bird-head-detector models
      uses: actions/cache@v4
      with:
        path: ${{ steps.cache-path.outputs.cache-dir }}
        key: bird-detector-models-${{ steps.cache-path.outputs.latest-tag }}-v1
        restore-keys: |
          bird-detector-models-${{ steps.cache-path.outputs.latest-tag }}-
          bird-detector-models-
        enableCrossOsArchive: true

    - name: Show cache status
      run: |
        echo "üîç Checking model cache status..."
        uv run python -c "
        from platformdirs import user_cache_dir
        from pathlib import Path
        import os

        cache_dir = Path(user_cache_dir('bird-head-detector', 'ericphanson'))
        models_dir = cache_dir / 'models'

        print(f'Cache directory: {cache_dir}')
        print(f'Models directory: {models_dir}')
        print(f'Models dir exists: {models_dir.exists()}')

        if models_dir.exists():
            models = list(models_dir.glob('*.pt'))
            print(f'Cached models: {len(models)}')
            for model in models:
                size_mb = model.stat().st_size / (1024 * 1024)
                print(f'  - {model.name} ({size_mb:.1f} MB)')
        else:
            print('No models directory found')
        "

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Build package
      run: uv build

    - name: Run end-to-end tests
      run: uv run python test/run_tests.py
      env:
        PYTHONIOENCODING: utf-8

    - name: Test tool installation (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "üß™ Testing uv tool install..."
        uv tool install .
        echo "‚úÖ Tool installed successfully"

        echo "üß™ Testing tool execution..."
        beaker --help
        echo "‚úÖ Tool help command works"

        echo "üß™ Testing tool uninstall..."
        uv tool uninstall beaker
        echo "‚úÖ Tool uninstalled successfully"

    - name: Test tool installation (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        echo Testing uv tool install...
        uv tool install .
        echo Tool installed successfully

        echo Testing tool execution...
        beaker --help
        echo Tool help command works

        echo Testing tool uninstall...
        uv tool uninstall beaker
        echo Tool uninstalled successfully

    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-debug-artifacts-${{ matrix.os }}-python${{ matrix.python-version }}
        path: |
          test/
          ./**/*.log
        retention-days: 7

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run ruff check
      run: uv run ruff check .

    - name: Run ruff format check
      run: uv run ruff format --check .

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run security audit
      run: |
        echo "üîç Running security audit..."
        uv run pip-audit --desc --ignore-vuln GHSA-887c-mr87-cxwp || {
          echo "‚ö†Ô∏è  Security audit completed with warnings (expected for local packages and non-applicable vulnerabilities)"
          exit 0
        }
