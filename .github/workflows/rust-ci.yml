name: Rust CI

on:
  push:
    branches: [ main ]
    paths:
      - 'beaker-rs/**'
      - '.github/workflows/rust-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'beaker-rs/**'
      - '.github/workflows/rust-ci.yml'
  workflow_dispatch:  # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Rust Implementation
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            features: "cpu"
          - target: x86_64-apple-darwin
            os: macos-latest
            features: "coreml"
          - target: aarch64-apple-darwin
            os: macos-latest
            features: "coreml"
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            features: "cpu"
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "beaker-rs -> target"
        # Include ONNX Runtime downloads in cache key
        key: ${{ matrix.target }}-${{ hashFiles('beaker-rs/Cargo.lock') }}-${{ hashFiles('beaker-rs/build.rs') }}

    - name: Cache ONNX model
      uses: actions/cache@v4
      with:
        path: ~/.cache/onnx-models
        key: onnx-model-${{ hashFiles('beaker-rs/build.rs') }}
        restore-keys: |
          onnx-model-
        enableCrossOsArchive: true

    - name: Set model cache environment
      run: echo "ONNX_MODEL_CACHE_DIR=$HOME/.cache/onnx-models" >> $GITHUB_ENV

    - name: Check code formatting
      run: cargo fmt --check
      working-directory: beaker-rs

    - name: Run clippy
      run: cargo clippy --target ${{ matrix.target }} --features ${{ matrix.features }} -- -D warnings
      working-directory: beaker-rs

    - name: Build (debug)
      run: cargo build --target ${{ matrix.target }} --features ${{ matrix.features }}
      working-directory: beaker-rs

    - name: Build (release)
      run: cargo build --release --target ${{ matrix.target }} --features ${{ matrix.features }}
      working-directory: beaker-rs

    - name: Copy example image to beaker-rs directory
      run: cp example.jpg beaker-rs/

    - name: Test CLI help (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "ðŸ§ª Testing CLI help command..."
        ./target/${{ matrix.target }}/release/beaker --help
        echo "âœ… CLI help works"
      working-directory: beaker-rs

    - name: Test CLI help (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Testing CLI help command..."
        ./target/${{ matrix.target }}/release/beaker.exe --help
        echo "CLI help works"
      working-directory: beaker-rs

    - name: Test CLI version (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "ðŸ§ª Testing CLI version command..."
        ./target/${{ matrix.target }}/release/beaker version
        echo "âœ… CLI version works"
      working-directory: beaker-rs

    - name: Test CLI version (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Testing CLI version command..."
        ./target/${{ matrix.target }}/release/beaker.exe version
        echo "CLI version works"
      working-directory: beaker-rs

    - name: Test CLI detection (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "ðŸ§ª Testing CLI detection command..."
        ./target/${{ matrix.target }}/release/beaker detect example.jpg --confidence 0.5
        echo "âœ… CLI detection works"
      working-directory: beaker-rs

    - name: Test CLI detection (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Testing CLI detection command..."
        ./target/${{ matrix.target }}/release/beaker.exe detect example.jpg --confidence 0.5
        echo "CLI detection works"
      working-directory: beaker-rs

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: beaker-${{ matrix.target }}
        path: |
          beaker-rs/target/${{ matrix.target }}/release/beaker*
        retention-days: 7



  # Cross-compilation disabled due to ONNX Runtime complexity
  # Use native runners for each target instead
  # Static musl builds disabled due to ONNX Runtime linking complexity

  # Summary job that depends on all others
  rust-ci-success:
    name: Rust CI Success
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Mark as successful
      run: echo "ðŸŽ‰ All Rust CI jobs completed successfully!"
