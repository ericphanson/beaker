name: Copilot Agent Environment Setup

on:
  workflow_call:
  workflow_dispatch:

jobs:
  copilot-setup-steps:
    name: Setup Development Environment for Copilot Agents
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "beaker -> target"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python development tools
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit ruff

    - name: Install cargo-warloc for line counting
      run: |
        cargo install cargo-warloc || echo "cargo-warloc installation failed, continuing..."

    - name: Setup pre-commit hooks
      run: |
        pre-commit install || echo "pre-commit install failed, continuing..."

    - name: Cache ONNX models
      uses: actions/cache@v4
      with:
        path: ~/.cache/onnx-models
        key: onnx-model-setup
        restore-keys: |
          onnx-model-

    - name: Set environment variables for development
      run: |
        echo "CARGO_TERM_COLOR=always" >> $GITHUB_ENV
        echo "ONNX_MODEL_CACHE_DIR=$HOME/.cache/onnx-models" >> $GITHUB_ENV
        echo "RUST_LOG=warn" >> $GITHUB_ENV

    - name: Verify installation
      run: |
        echo "üîç Verifying tool installations..."
        echo "Rust version:"
        rustc --version
        cargo --version
        echo ""
        echo "Python tools:"
        python --version
        pip --version
        ruff --version
        pre-commit --version
        echo ""
        echo "Cargo tools:"
        cargo fmt --version
        cargo clippy --version
        cargo-warloc --version || echo "cargo-warloc not available"
        echo ""
        echo "‚úÖ Environment setup complete!"

    - name: Run basic validation
      run: |
        echo "üß™ Running basic validation..."
        cd beaker

        echo "Checking Rust formatting..."
        cargo fmt --check || echo "Formatting check failed"

        echo "Running clippy..."
        cargo clippy -- -D warnings -D clippy::uninlined_format_args || echo "Clippy check failed"

        cd ..
        echo "Running pre-commit on all files..."
        pre-commit run --all-files || echo "Pre-commit checks failed"

        echo "‚úÖ Basic validation complete!"
