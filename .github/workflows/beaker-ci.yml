name: Beaker CI

on:
  push:
    branches: [ main ]
    paths:
      - 'beaker/**'
      - 'beaker-stamp/**'
      - 'beaker-stamp-derive/**'
      - 'Cargo.toml'
      - '.github/workflows/beaker-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'beaker/**'
      - 'beaker-stamp/**'
      - 'beaker-stamp-derive/**'
      - 'Cargo.toml'
      - '.github/workflows/beaker-ci.yml'
  workflow_dispatch:  # Allow manual triggering

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: "debug"
  RUST_BACKTRACE: "1"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  test:
    name: Test Beaker
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            device: "auto"  # Will fallback to CPU on Linux
          - target: x86_64-apple-darwin
            os: macos-latest
            device: "auto"  # Will use CoreML on macOS
          - target: aarch64-apple-darwin
            os: macos-latest
            device: "auto"  # Will use CoreML on macOS
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            device: "auto"  # Will fallback to CPU on Windows
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        # Workspace structure - cache at root level
        key: ${{ matrix.target }}-${{ hashFiles('Cargo.lock') }}

    - name: Cache ONNX model
      uses: actions/cache@v4
      with:
        path: ~/.cache/onnx-models
        key: onnx-model
        restore-keys: |
          onnx-model-
        enableCrossOsArchive: true

    - name: Set model cache environment
      run: echo "ONNX_MODEL_CACHE_DIR=$HOME/.cache/onnx-models" >> $GITHUB_ENV

    - name: Check code formatting
      run: cargo fmt --all --check

    - name: Run clippy
      run: cargo clippy --all-targets --target ${{ matrix.target }} -- -D warnings

    - name: Build (debug)
      run: cargo build --target ${{ matrix.target }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build (release)
      run: cargo build --release --target ${{ matrix.target }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Show binary information (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "üìä Binary information:"
        ls -lh target/${{ matrix.target }}/release/beaker
        echo ""
        echo "üîç Binary size: $(du -h target/${{ matrix.target }}/release/beaker | cut -f1)"
        echo "üìè Stripped size: $(strip target/${{ matrix.target }}/release/beaker -o /tmp/beaker-stripped && du -h /tmp/beaker-stripped | cut -f1)"

    - name: Show binary information (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Binary information:"
        Get-ChildItem target/${{ matrix.target }}/release/beaker.exe | Format-Table Name, Length

    - name: Verify example images exist (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        ls -la example*.jpg
        echo "Example images found in repository root"

    - name: Test CLI help (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "üß™ Testing CLI help command..."
        ./target/${{ matrix.target }}/release/beaker --help
        echo "‚úÖ CLI help works"

    - name: Test CLI help (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Testing CLI help command..."
        ./target/${{ matrix.target }}/release/beaker.exe --help
        echo "CLI help works"

    - name: Test CLI detect command with ORT logging (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "üß™ Testing CLI detect command with ORT logging..."
        echo "Device: ${{ matrix.device }}, Target: ${{ matrix.target }}"
        ./target/${{ matrix.target }}/release/beaker detect example.jpg --confidence 0.5 --device ${{ matrix.device }} --metadata
        echo "‚úÖ CLI detect command works"

    - name: Test CLI detect command with ORT logging (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Testing CLI detect command with ORT logging..."
        echo "Device: ${{ matrix.device }}, Target: ${{ matrix.target }}"
        ./target/${{ matrix.target }}/release/beaker.exe detect example.jpg --confidence 0.5 --device ${{ matrix.device }} --metadata
        echo "CLI detect command works"

    - name: Test execution provider details with debug logging (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "üîç Testing execution provider details with debug logging..."
        echo "Platform: ${{ matrix.os }}, Target: ${{ matrix.target }}"
        echo "Expected behavior:"
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          echo "  - CoreML should be available and used"
          echo "  - Should see CoreML model compilation logs"
        else
          echo "  - CoreML should not be available, fallback to CPU"
          echo "  - Should see CPU-only execution"
        fi
        echo ""
        echo "=== Running with --device auto ==="
        ./target/${{ matrix.target }}/release/beaker detect example.jpg --confidence 0.5 --device auto --metadata
        echo ""
        echo "=== Running with --device cpu ==="
        ./target/${{ matrix.target }}/release/beaker detect example.jpg --confidence 0.5 --device cpu --metadata
        echo "‚úÖ Execution provider testing complete"

    - name: Test execution provider details with debug logging (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Testing execution provider details with debug logging..."
        echo "Platform: ${{ matrix.os }}, Target: ${{ matrix.target }}"
        echo "Expected: CoreML should not be available, fallback to CPU"
        echo ""
        echo "=== Running with --device auto ==="
        ./target/${{ matrix.target }}/release/beaker.exe detect example.jpg --confidence 0.5 --device auto --metadata
        echo ""
        echo "=== Running with --device cpu ==="
        ./target/${{ matrix.target }}/release/beaker.exe detect example.jpg --confidence 0.5 --device cpu --metadata
        echo "Execution provider testing complete"

    - name: Verify all test images exist (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        ls -la example*.jpg
        echo "All test images found in repository root"

    - name: Pre-download models for testing (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "üîΩ Pre-downloading models to avoid test concurrency issues..."
        echo "Running cutout command to trigger model download:"
        ./target/${{ matrix.target }}/release/beaker cutout example.jpg --device ${{ matrix.device }} || echo "Pre-download may have failed but continuing with tests"
        echo "‚úÖ Model pre-download attempt completed"

    - name: Pre-download models for testing (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Pre-downloading models to avoid test concurrency issues..."
        echo "Running cutout command to trigger model download:"
        ./target/${{ matrix.target }}/release/beaker.exe cutout example.jpg --device ${{ matrix.device }} || echo "Pre-download may have failed but continuing with tests"
        echo "Model pre-download attempt completed"

    # Run all tests except make_integration since it's slow
    - name: Run regular integration tests
      run: cargo test --release --all --target ${{ matrix.target }} --verbose -- --skip make_integration_end_to_end

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: beaker-${{ matrix.target }}
        path: |
          target/${{ matrix.target }}/release/beaker*
        retention-days: 7



  # Cross-compilation disabled due to ONNX Runtime complexity
  # Use native runners for each target instead
  # Static musl builds disabled due to ONNX Runtime linking complexity

  # Summary job that depends on all others
  rust-ci-success:
    name: Rust CI Success
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Mark as successful
      run: echo "üéâ All Rust CI jobs completed successfully!"
