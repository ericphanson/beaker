name: Beaker CI

on:
  push:
    branches: [ main ]
    paths:
      - 'beaker/**'
      - 'beaker-stamp/**'
      - 'beaker-stamp-derive/**'
      - 'Cargo.toml'
      - 'justfile'
      - '.github/workflows/beaker-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'beaker/**'
      - 'beaker-stamp/**'
      - 'beaker-stamp-derive/**'
      - 'Cargo.toml'
      - 'justfile'
      - '.github/workflows/beaker-ci.yml'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: "1"

jobs:
  # Lint job - runs once on Linux only
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "lint"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Run lint checks
        run: just ci-lint

  # Build and smoke test - runs on all platforms
  build:
    name: Build (${{ matrix.target }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          cache-on-failure: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Cache ONNX models
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/onnx-models
            ~/Library/Caches/onnx-models
            ~\AppData\Local\onnx-models\Cache
          key: onnx-models-v1
          restore-keys: onnx-models-

      - name: Set ONNX cache directory
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "ONNX_MODEL_CACHE_DIR=$HOME/AppData/Local/onnx-models/Cache" >> $GITHUB_ENV
          else
            echo "ONNX_MODEL_CACHE_DIR=$HOME/.cache/onnx-models" >> $GITHUB_ENV
          fi

      - name: Build release
        shell: bash
        run: just build-release ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Show binary info
        if: runner.os != 'Windows'
        run: just build-info ${{ matrix.target }}

      # Basic smoke test - just verify binary runs
      - name: Smoke test - help command
        shell: bash
        run: just test-cli-help ${{ matrix.target }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: beaker-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/beaker
            target/${{ matrix.target }}/release/beaker.exe
          retention-days: 7
          if-no-files-found: ignore

  # Full test suite - Linux only, parallel execution
  test-unit:
    name: Unit Tests (Linux)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "test"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Cache ONNX models
        uses: actions/cache@v4
        with:
          path: ~/.cache/onnx-models
          key: onnx-models-v1
          restore-keys: onnx-models-

      - name: Set ONNX cache directory
        run: echo "ONNX_MODEL_CACHE_DIR=$HOME/.cache/onnx-models" >> $GITHUB_ENV

      - name: Build release binary
        run: just build-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unit tests
        run: cargo test --release --lib --all

  test-integration:
    name: Integration Tests (Linux)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "test"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Cache ONNX models
        uses: actions/cache@v4
        with:
          path: ~/.cache/onnx-models
          key: onnx-models-v1
          restore-keys: onnx-models-

      - name: Set ONNX cache directory
        run: echo "ONNX_MODEL_CACHE_DIR=$HOME/.cache/onnx-models" >> $GITHUB_ENV

      - name: Build release binary
        run: just build-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run integration tests
        run: cargo test --release --test '*' --all

  test-cli:
    name: CLI Tests (Linux)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "test"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Cache ONNX models
        uses: actions/cache@v4
        with:
          path: ~/.cache/onnx-models
          key: onnx-models-v1
          restore-keys: onnx-models-

      - name: Set ONNX cache directory
        run: echo "ONNX_MODEL_CACHE_DIR=$HOME/.cache/onnx-models" >> $GITHUB_ENV

      - name: Build release binary
        run: just build-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Preload models
        run: just preload-models "" "auto"

      - name: Test CLI help
        run: just test-cli-help

      - name: Test CLI detect
        run: just test-cli-detect "" "auto"

      - name: Test execution providers
        run: just test-execution-providers "" "linux"

  # Summary job
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, build, test-unit, test-integration, test-cli]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          results="${{ toJSON(needs) }}"
          echo "Job results: $results"

          if echo "$results" | jq -e 'to_entries[] | select(.value.result != "success")' > /dev/null; then
            echo "Some CI jobs failed"
            exit 1
          fi

          echo "All CI jobs passed!"
