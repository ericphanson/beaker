import sys
import re
from pathlib import Path

# --- Setup ---
if len(sys.argv) != 3:
    print("Usage: python summarize.py <line_counts.md> <project_root>")
    sys.exit(1)

input_file = Path(sys.argv[1])
project_root = Path(sys.argv[2]).resolve()

cutout_files = {
    "cutout_processing.rs",
    "cutout_postprocessing.rs",
    "cutout_preprocessing.rs",
}

head_files = {
    "detection_obj.rs",
    "yolo_preprocessing.rs",
    "yolo_postprocessing.rs",
    "rfdetr_postprocessing.rs",
    "head_detection.rs",
}

# --- Counters ---
cutout_main = cutout_test = 0
head_main = head_test = 0
common_main = common_test = 0
build_main = 0

# --- Read and strip previous summary ---
with input_file.open("r", encoding="utf-8") as f:
    original_content = f.read()

content = re.sub(
    r"(?s)^## Summary\n.*?\n## Raw Counts\n", "", original_content, flags=re.MULTILINE
)

lines = content.splitlines()
raw_data_lines = lines[1:]  # skip first line "Generated by ..."

# --- Parse File Blocks ---
i = 0
while i < len(raw_data_lines):
    line = raw_data_lines[i].strip()
    match = re.match(r"File name:\s+\.(/.*?)$", line)
    if match:
        filepath = project_root / match.group(1).lstrip("/")
        filename = filepath.name

        i += 3  # skip header and separator
        if i + 1 >= len(raw_data_lines):
            break
        main_line = raw_data_lines[i]
        test_line = raw_data_lines[i + 1]
        i += 1

        def get_code(line):
            fields = [x.strip() for x in line.split("|")]
            return (
                int(fields[1])
                if len(fields) >= 2 and fields[0] in ("Main", "Tests")
                else 0
            )

        main_code = get_code(main_line)
        test_code = get_code(test_line)

        if filename == "build.rs":
            build_main += main_code
        elif filename in cutout_files:
            cutout_main += main_code
            cutout_test += test_code
        elif filename in head_files:
            head_main += main_code
            head_test += test_code
        else:
            common_main += main_code
            common_test += test_code
    else:
        i += 1

# --- Extract reported total ---
reported_main_total = None
for i in range(len(raw_data_lines)):
    if raw_data_lines[i].strip().startswith("File count:"):
        for j in range(i + 2, min(i + 6, len(raw_data_lines))):
            if raw_data_lines[j].strip().startswith("Main"):
                fields = [x.strip() for x in raw_data_lines[j].split("|")]
                try:
                    reported_main_total = int(fields[1])
                except (ValueError, IndexError):
                    pass
                break
        break

# --- Build summary ---
actual_total = cutout_main + head_main + common_main + build_main
actual_total_excl_build = cutout_main + head_main + common_main

summary_lines = [
    "## Summary",
    "",
    f"- **Cutout Main Code**: {cutout_main} (Tests: {cutout_test})  ",
    f"- **Head Main Code**: {head_main} (Tests: {head_test})  ",
    f"- **Common Main Code**: {common_main} (Tests: {common_test})  ",
    f"- **Total Main Code**: {actual_total} (Reported: {reported_main_total})  ",
]

summary_lines.append(
    "✅ Totals match."
    if actual_total == reported_main_total
    else "❌ Mismatch: total does not match reported Main Code count!"
)

# --- Write output back ---
with input_file.open("w", encoding="utf-8") as f:
    f.write("\n".join(summary_lines) + "\n")

# Print summary to stdout
print("\n".join(summary_lines[2:-3]))
