import sys
import re

cutout_files = {
    "cutout_processing.rs",
    "cutout_postprocessing.rs",
    "cutout_preprocessing.rs",
}

head_files = {
    "yolo_preprocessing.rs",
    "yolo_postprocessing.rs",
    "head_detection.rs",
}

cutout_main = cutout_test = 0
head_main = head_test = 0
common_main = common_test = 0
build_main = 0

if len(sys.argv) != 2:
    print("Usage: python summarize_markdown.py <line_counts.txt>")
    sys.exit(1)

with open(sys.argv[1], "r", encoding="utf-8") as f:
    original_content = f.read()

# Strip previous summary block (from "Summary" to "Raw Counts")
content = re.sub(
    r"(?s)^## Summary\n.*?\n## Raw Counts\n", "", original_content, flags=re.MULTILINE
)

lines = content.splitlines()
raw_data_lines = lines[1:]  # skip first "Generated by ..." header line

i = 0
while i < len(raw_data_lines):
    line = raw_data_lines[i].strip()
    file_match = re.match(r"File name: \./beaker/(?:src/)?([a-zA-Z0-9_]+\.rs)", line)
    if file_match:
        file = file_match.group(1)
        i += 3
        if i + 1 >= len(raw_data_lines):
            break
        main_line = raw_data_lines[i]
        test_line = raw_data_lines[i + 1]
        i += 1

        def get_code(line):
            fields = [x.strip() for x in line.split("|")]
            return (
                int(fields[1])
                if len(fields) >= 2 and fields[0] in ("Main", "Tests")
                else 0
            )

        main_code = get_code(main_line)
        test_code = get_code(test_line)

        if file == "build.rs":
            build_main += main_code
        elif file in cutout_files:
            cutout_main += main_code
            cutout_test += test_code
        elif file in head_files:
            head_main += main_code
            head_test += test_code
        else:
            common_main += main_code
            common_test += test_code
    else:
        i += 1

# Extract reported total
reported_main_total = None
for i in range(len(raw_data_lines)):
    if raw_data_lines[i].strip().startswith("File count:"):
        for j in range(i + 2, min(i + 6, len(raw_data_lines))):
            if raw_data_lines[j].strip().startswith("Main"):
                fields = [x.strip() for x in raw_data_lines[j].split("|")]
                if len(fields) >= 2:
                    try:
                        reported_main_total = int(fields[1])
                    except ValueError:
                        pass
                break
        break

actual_total = cutout_main + head_main + common_main + build_main
actual_total_excl_build = cutout_main + head_main + common_main

# Construct summary
summary_lines = [
    "## Summary",
    "",
    f"- **Cutout Main Code**: {cutout_main} (Tests: {cutout_test})  ",
    f"- **Head Main Code**: {head_main} (Tests: {head_test})  ",
    f"- **Common Main Code**: {common_main} (Tests: {common_test})  ",
    f"- **Total Main Code (excluding build.rs)**: {actual_total_excl_build}  ",
    f"- **Total Main Code (including build.rs)**: {actual_total} (Reported: {reported_main_total})  ",
]
summary_lines.append("")  # Blank line

if reported_main_total is not None and actual_total == reported_main_total:
    summary_lines.append("✅ Totals match.")
else:
    summary_lines.append("❌ Mismatch: total does not match reported Main Code count!")

summary_lines.append("")  # Blank line
summary_lines.append("## Raw Counts")
summary_lines.append("")  # Blank line

# Fix Markdown tables
fixed_lines = []
i = 0
while i < len(raw_data_lines):
    fixed_lines.append(raw_data_lines[i])
    if raw_data_lines[i].strip().startswith("Type") and i + 4 < len(raw_data_lines):
        # Copy header and three rows as-is
        fixed_lines.append(raw_data_lines[i + 1])  # separator
        fixed_lines.append(raw_data_lines[i + 2])  # Main
        fixed_lines.append(raw_data_lines[i + 3])  # Tests
        fixed_lines.append(raw_data_lines[i + 4])  # Examples

        # Skip next line (second separator)
        # Then transform the blank 'total' row into 'Total'
        total_line = raw_data_lines[i + 6]
        total_fields = total_line.split("|")
        total_fields[0] = "Total"
        fixed_lines.append("|".join(total_fields))

        i += 7  # Move past full block
    else:
        i += 1

# Write everything back
with open(sys.argv[1], "w", encoding="utf-8") as f:
    f.write("\n".join(summary_lines) + "\n")
    f.write("\n".join(fixed_lines) + "\n")
